import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import fs from "node:fs"

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

// Create two separate bundles: main.js and vendor.js

// Build main bundle (excluding citation-js)
const mainContext = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		"@citation-js/core",
		"@citation-js/plugin-bibtex",
		"@citation-js/plugin-doi",
		"@citation-js/plugin-isbn",
		"@citation-js/plugin-hayagriva",
		...builtins],
	format: "cjs",
	target: "node22",
	platform: "node",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: true,
	metafile: prod
});

// Build vendor bundle (citation-js libraries)
const vendorContext = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/vendor-loader.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "node22",
	platform: "node",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "vendor.js",
	minify: true,
	metafile: prod
});

if (prod) {
	// Build both bundles in parallel
	const [mainResult, vendorResult] = await Promise.all([
		mainContext.rebuild(),
		vendorContext.rebuild()
	]);

	// Write metadata for main bundle
	fs.writeFileSync('meta.json', JSON.stringify(mainResult.metafile, null, 2));

	// Write metadata for vendor bundle
	fs.writeFileSync('vendor-meta.json', JSON.stringify(vendorResult.metafile, null, 2));

	process.exit(0);
} else {
	// Watch for changes in development
	await Promise.all([mainContext.watch(), vendorContext.watch()]);
}